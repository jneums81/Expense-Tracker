<!-- views/add.ejs -->

<h2>Add Expense</h2>

<form id="expense-form" action="/add" method="post">
    <label for="description">Description:</label>
    <input type="text" id="description" name="description" required>

    <label for="amount">Amount:</label>
    <input type="number" id="amount" name="amount" required>

    <label for="date">Date:</label>
    <input type="date" id="date" name="date" required>

    <button type="button" onclick="submitExpense()">Add Expense</button>
</form>

<script>
    // Add front-end logic here
    function submitExpense() {
        const form = document.getElementById('expense-form');
        const description = document.getElementById('description').value;
        const amount = document.getElementById('amount').value;
        const date = document.getElementById('date').value;

        // Create a FormData object to send data via AJAX
        const formData = new FormData(form);

        // Use Fetch API to send the form data to the server
        fetch('/add', {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            console.log(data); // Log the response from the server
            // Optionally, you can update the UI here based on the response
            form.reset(); // Reset the form after successful submission
            // You may update the UI by adding the new expense to the list
            // (this is just a basic example, consider using a front-end framework for more complex apps)
            const expenseList = document.getElementById('expense-list');
            const newExpenseItem = document.createElement('li');
            newExpenseItem.innerHTML = `<strong>${description}</strong> <span>${amount}</span> <span>${date}</span>`;
            expenseList.appendChild(newExpenseItem);
        })
        .catch(error => {
            console.error(error);
            // Handle errors here, e.g., show an error message to the user
        });
    }
</script>
